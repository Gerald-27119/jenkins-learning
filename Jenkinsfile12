pipeline {
  agent none
  options {
    skipDefaultCheckout()
    timestamps()
    buildDiscarder(logRotator(numToKeepStr: '10'))
  }

  stages {
    stage('Checkout') {
      agent {
        docker {
          image 'adam27119/custom-jenkins-agent:1.0.3'
          args '-u root -v /var/run/docker.sock:/var/run/docker.sock --entrypoint=""'
        }
      }
      steps {
        // Klonujemy kod i od razu walidujemy Mavenem
        git url: 'https://github.com/Gerald-27119/jenkins-learning.git', branch: 'master'
        sh 'mvn validate'
      }
    }

    stage('Build') {
      agent {
        docker {
          image 'adam27119/custom-jenkins-agent:1.0.3'
          args '-u root -v /var/run/docker.sock:/var/run/docker.sock --entrypoint=""'
        }
      }
      environment {
        TARGET_DIR = 'target'
        CLASS_DIR  = "${TARGET_DIR}/classes"
        TEST_DIR   = "${TARGET_DIR}/test-classes"
        REPORT_DIR = "${TARGET_DIR}/reports"
      }
      steps {
        // Kompilacja kodu i test√≥w
        sh """
          mkdir -p ${CLASS_DIR} ${TEST_DIR} ${REPORT_DIR}
          javac -d ${CLASS_DIR} -cp "lib/*" \$(find src/main/java -name '*.java')
          javac -d ${TEST_DIR}  -cp "${CLASS_DIR}:lib/*" \$(find src/test/java  -name '*.java')
        """
        // Przechowujemy skompilowane klasy i biblioteki
        stash name: 'build-artifacts', includes: "${CLASS_DIR}/**/*.class,${TEST_DIR}/**/*.class,lib/**/*.jar"
      }
    }

    stage('Test & Coverage') {
      agent {
        docker {
          image 'adam27119/custom-jenkins-agent:1.0.3'
          args '-u root -v /var/run/docker.sock:/var/run/docker.sock --entrypoint=""'
        }
      }
      environment {
        TARGET_DIR = 'target'
        REPORT_DIR = "${TARGET_DIR}/reports"
      }
      steps {
        // Przywracamy skompilowane artefakty
        unstash 'build-artifacts'

        // Wy≈õwietlamy bibliotekƒô, ≈ºeby mieƒá podglƒÖd
        sh 'echo "Zawarto≈õƒá lib:" && ls -l lib'

        script {
          try {
            // Uruchamiamy JUnit Platform Console do test√≥w
            sh """
              java -jar lib/junit-platform-console-standalone-*.jar \
                --class-path ${CLASS_DIR}:${TEST_DIR}:lib/* \
                --scan-class-path \
                --reports-dir=${REPORT_DIR}
            """
          } finally {
            // Nawet je≈õli testy padnƒÖ, archiwizujemy wyniki
            junit testResults: "${REPORT_DIR}/**/*.xml", allowEmptyResults: true
          }
        }

        // (opcjonalnie) tu mo≈ºesz generowaƒá coverage, np. JaCoCo offline
        // sh 'mvn jacoco:report'
        // archiveArtifacts artifacts: 'target/site/jacoco/**/*', allowEmptyArchive: true
      }
    }

    stage('Archive Artifacts') {
      agent any
      steps {
        archiveArtifacts artifacts: 'target/**/*.jar', fingerprint: true
        archiveArtifacts artifacts: 'target/reports/**/*.xml', allowEmptyArchive: true
      }
    }

    stage('Build & Push Docker Image') {
      agent {
        docker {
          image 'adam27119/custom-jenkins-agent:1.0.3'
          args '-u root -v /var/run/docker.sock:/var/run/docker.sock --entrypoint=""'
        }
      }
      environment {
        APP_NAME              = 'moja-microservice'
        DOCKER_REPOSITORY     = "adam27119/${APP_NAME}"
        DOCKER_CREDENTIALS_ID = '77e766fd-1c1e-40b2-a0b2-dfcc71d65b46'
        DOCKER_REGISTRY       = 'docker.io'
      }
      steps {
        script {
          def tagNum    = "${DOCKER_REPOSITORY}:${env.BUILD_NUMBER}"
          def tagLatest = "${DOCKER_REPOSITORY}:latest"
          docker.build(tagNum, "-f Dockerfile .")
          docker.build(tagLatest, "-f Dockerfile .")
        }
        withCredentials([usernamePassword(
          credentialsId: DOCKER_CREDENTIALS_ID,
          usernameVariable: 'DOCKER_USER',
          passwordVariable: 'DOCKER_PASS'
        )]) {
          sh "echo \$DOCKER_PASS | docker login ${DOCKER_REGISTRY} -u \$DOCKER_USER --password-stdin"
          sh "docker push ${DOCKER_REPOSITORY}:${env.BUILD_NUMBER}"
          sh "docker push ${DOCKER_REPOSITORY}:latest"
        }
      }
    }

    stage('Cleanup') {
      agent any
      steps {
        sh '''
          docker rmi adam27119/moja-microservice:${BUILD_NUMBER} || true
          docker rmi adam27119/moja-microservice:latest   || true
          docker system prune -f                         || true
        '''
      }
    }
  }

  post {
    always {
      echo "üî• Pipeline zako≈Ñczony (status: ${currentBuild.currentResult})"
    }
    success {
      echo '‚úÖ Pipeline zako≈Ñczony sukcesem'
    }
    failure {
      echo '‚ùå Pipeline zako≈Ñczony niepowodzeniem'
    }
  }
}
