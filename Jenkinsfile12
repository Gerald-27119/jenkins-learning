pipeline {
  agent none

  options {
    skipDefaultCheckout()
    timestamps()
    buildDiscarder(logRotator(numToKeepStr: '10'))
  }

  stages {
    stage('Build & Push') {
      agent {
        docker {
          image 'adam27119/custom-jenkins-agent:1.0.3'
          args  '-u root -v /var/run/docker.sock:/var/run/docker.sock'
        }
      }
      environment {
        APP_NAME              = 'moja-microservice'
        DOCKER_REPOSITORY     = "adam27119/${APP_NAME}"
        DOCKER_REGISTRY       = 'docker.io'
        DOCKER_CREDENTIALS_ID = '77e766fd-1c1e-40b2-a0b2-dfcc71d65b46'
      }
      steps {
        // 1. Pobieramy kod
        checkout scm

        // 2. Static Analysis
        sh 'mvn validate'

        // 3. Równoległe testy i coverage
        parallel (
          'Unit Tests': {
            sh 'mvn test'
            junit '**/target/surefire-reports/*.xml'
            jacoco execPattern: '**/target/jacoco.exec'
          },
          'Integration Tests': {
            sh 'mvn verify -Pintegration-tests'
            junit '**/target/failsafe-reports/*.xml'
          }
        )

        // 4. Archiwizacja artefaktów
        archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true
        archiveArtifacts artifacts: '**/target/site/jacoco/**/*', allowEmptyArchive: true

        // 5. Budowanie obrazów
        script {
          def tagNum    = "${DOCKER_REPOSITORY}:${env.BUILD_NUMBER}"
          def tagLatest = "${DOCKER_REPOSITORY}:latest"
          docker.build(tagNum, "-f Dockerfile .")
          docker.build(tagLatest, "-f Dockerfile .")
        }

        // 6. Push do Docker Hub
        withCredentials([usernamePassword(
          credentialsId: DOCKER_CREDENTIALS_ID,
          usernameVariable: 'DOCKER_USER',
          passwordVariable: 'DOCKER_PASS'
        )]) {
          sh "echo \$DOCKER_PASS | docker login ${DOCKER_REGISTRY} -u \$DOCKER_USER --password-stdin"
          sh "docker push ${DOCKER_REPOSITORY}:${env.BUILD_NUMBER}"
          sh "docker push ${DOCKER_REPOSITORY}:latest"
        }
      }
    }

    stage('Cleanup') {
      agent any
      steps {
        // Teraz workspace i FilePath są dostępne
        sh '''
          docker rmi adam27119/moja-microservice:${BUILD_NUMBER} || true
          docker rmi adam27119/moja-microservice:latest   || true
          docker system prune -f                         || true
        '''
      }
    }
  }

  post {
    success { echo '✅ Pipeline zakończony sukcesem' }
    failure { echo '❌ Pipeline zakończony niepowodzeniem' }
  }
}
